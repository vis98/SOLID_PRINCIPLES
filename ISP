(source Baeldung) As per ISP principle .try to bifurcate interface as per usecase and avoid fat interfaces(interfaces having methods which might not be used by class implementing that interface)
public interface Payment { 
    void initiatePayments();
    Object status();
    List<Object> getPayments();
     void intiateLoanSettlement();
    void initiateRePayment();
}

public class LoanPayment implements Payment {

    @Override
    public void initiatePayments() {
        throw new UnsupportedOperationException("This is not a bank payment");
    }

    @Override
    public Object status() {
        // ...
    }

    @Override
    public List<Object> getPayments() {
        // ...
    }

    @Override
    public void intiateLoanSettlement() {
        // ...
    }

    @Override
    public void initiateRePayment() {
        // ...
    }
}

public class BankPayment implements Payment {

    @Override
    public void initiatePayments() {
        // ...
    }

    @Override
    public Object status() {
        // ...
    }

    @Override
    public List<Object> getPayments() {
        // ...
    }

    @Override
    public void intiateLoanSettlement() {
        throw new UnsupportedOperationException("This is not a loan payment");
    }

    @Override
    public void initiateRePayment() {
        throw new UnsupportedOperationException("This is not a loan payment");
    }
}

Bank does not use intiateLoanSettlement & initiateRePayment so its breaking ISP .

Applying Principle
public interface Payment {
    Object status();
    List<Object> getPayments();
}

public interface Bank extends Payment {
    void initiatePayments();
}
Copy
public interface Loan extends Payment {
    void intiateLoanSettlement();
    void initiateRePayment();
}
